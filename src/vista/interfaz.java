
package vista;

import javax.swing.table.DefaultTableModel;
import controlador.*;
import java.util.ArrayList;
import modelo.CContacto;

/**
 *
 * @author juanp
 */

public class interfaz extends javax.swing.JFrame {

    //modelo para manipular la tabla
    DefaultTableModel modelo;

    //instancia del objeto para interactuar con la capa de control
    CControl c = new CControl();

    public interfaz() {
        initComponents();

        //inicio el modelo para manipular la tabla
        modelo = (DefaultTableModel) tabla.getModel();

        // Mostrar líneas de la tabla
        tabla.setShowHorizontalLines(true);
        tabla.setShowVerticalLines(true);

        // Color de las líneas
        tabla.setGridColor(java.awt.Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lnombres = new javax.swing.JLabel();
        ldireccion = new javax.swing.JLabel();
        nombres = new javax.swing.JTextField();
        direccion = new javax.swing.JTextField();
        lapellidos = new javax.swing.JLabel();
        apellidos = new javax.swing.JTextField();
        ltelefono = new javax.swing.JLabel();
        telefono = new javax.swing.JTextField();
        lemail = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        agregar = new javax.swing.JButton();
        consultar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        salida = new javax.swing.JTextArea();
        titulo = new javax.swing.JLabel();
        listarciudad = new javax.swing.JButton();
        listarrangoid = new javax.swing.JButton();
        listarcalles = new javax.swing.JButton();
        listarcarreras = new javax.swing.JButton();
        listarprefijo = new javax.swing.JButton();
        listaralfa = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        Borrar = new javax.swing.JButton();
        lopcioneslistar = new javax.swing.JLabel();
        listaridpar = new javax.swing.JButton();
        listaridimpares = new javax.swing.JButton();
        listarcampo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buscarnombre = new javax.swing.JButton();
        buscarapellido = new javax.swing.JButton();
        buscarid = new javax.swing.JButton();
        idinicial = new javax.swing.JTextField();
        idfinal = new javax.swing.JTextField();
        lidnicial = new javax.swing.JLabel();
        lidfinal = new javax.swing.JLabel();
        lid = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        uncampo = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lnombres.setText("Nombres:");

        ldireccion.setText("Direccion:");

        nombres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombresActionPerformed(evt);
            }
        });

        direccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direccionActionPerformed(evt);
            }
        });

        lapellidos.setText("Apellidos:");

        apellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apellidosActionPerformed(evt);
            }
        });

        ltelefono.setText("Telefono:");

        lemail.setText("Email:");

        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        consultar.setText("Consultar");
        consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombres", "Apellidos", "Telefono", "Direccion", "Email"
            }
        ));
        jScrollPane2.setViewportView(tabla);

        salida.setColumns(20);
        salida.setRows(5);
        jScrollPane3.setViewportView(salida);

        titulo.setText("AGENDA TELEFONICA");

        listarciudad.setText("LISTAR POR CIUDAD");
        listarciudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarciudadActionPerformed(evt);
            }
        });

        listarrangoid.setText("LISTAR POR RANGO DE ID");
        listarrangoid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarrangoidActionPerformed(evt);
            }
        });

        listarcalles.setText("LISTAR POR CALLES");
        listarcalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarcallesActionPerformed(evt);
            }
        });

        listarcarreras.setText("LISTAR POR CARRERAS");
        listarcarreras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarcarrerasActionPerformed(evt);
            }
        });

        listarprefijo.setText("LISTAR POR PREFIJO");
        listarprefijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarprefijoActionPerformed(evt);
            }
        });

        listaralfa.setText("LISTAR ALFABETICAMENTE");
        listaralfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaralfaActionPerformed(evt);
            }
        });

        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        Borrar.setText("Borrar");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });

        lopcioneslistar.setText("OPCIONES LISTAR");

        listaridpar.setText("LISTAR ID PARES");
        listaridpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaridparActionPerformed(evt);
            }
        });

        listaridimpares.setText("LISTAR ID IMPARES");
        listaridimpares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaridimparesActionPerformed(evt);
            }
        });

        listarcampo.setText("LISTAR UN CAMPO");
        listarcampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarcampoActionPerformed(evt);
            }
        });

        jLabel1.setText("OPCIONES BUSCAR");

        buscarnombre.setText("BUSCAR POR NOMBRE");
        buscarnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarnombreActionPerformed(evt);
            }
        });

        buscarapellido.setText("BUSCAR POR APELLIDO");
        buscarapellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarapellidoActionPerformed(evt);
            }
        });

        buscarid.setText("BUSCAR POR ID");
        buscarid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaridActionPerformed(evt);
            }
        });

        idinicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idinicialActionPerformed(evt);
            }
        });

        lidnicial.setText("ID INICIAL");

        lidfinal.setText("ID FINAL");

        lid.setText("Id");

        uncampo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "id", "nombres", "apellidos", "telefono", "direccion", "email" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(listarciudad)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(lidnicial)
                                        .addGap(30, 30, 30))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(idinicial, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lidfinal)
                                    .addComponent(idfinal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(listarrangoid)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(listarprefijo)
                                    .addComponent(listarcarreras))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(listaridimpares)
                                    .addComponent(listaridpar)))
                            .addComponent(lopcioneslistar))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(uncampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addComponent(titulo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ldireccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lnombres, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lapellidos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ltelefono)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lemail)
                                        .addGap(18, 18, 18)
                                        .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lid)
                                        .addGap(17, 17, 17)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(agregar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(consultar)
                                        .addGap(144, 144, 144)
                                        .addComponent(editar)
                                        .addGap(28, 28, 28)
                                        .addComponent(Borrar))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buscarnombre)
                                    .addComponent(buscarapellido)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(buscarid))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel1)))))))
                .addContainerGap(69, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(listarcalles)
                .addGap(28, 28, 28)
                .addComponent(listaralfa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listarcampo)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lnombres)
                    .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ltelefono)
                    .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lapellidos))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ldireccion)
                    .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lemail)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lid)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregar)
                    .addComponent(consultar)
                    .addComponent(editar)
                    .addComponent(Borrar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(buscarnombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscarapellido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscarid))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lopcioneslistar)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listarcarreras)
                            .addComponent(listarciudad)
                            .addComponent(listaridpar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lidnicial)
                            .addComponent(lidfinal))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(idinicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(idfinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(listarprefijo)
                                            .addComponent(listaridimpares))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listarrangoid))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(uncampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listarcalles)
                    .addComponent(listaralfa)
                    .addComponent(listarcampo))
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nombresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombresActionPerformed

    private void direccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_direccionActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        if (!nombres.getText().trim().isEmpty() && !apellidos.getText().trim().isEmpty() && !telefono.getText().trim().isEmpty()
                && !direccion.getText().trim().isEmpty() && !email.getText().trim().isEmpty()) {

            boolean bandera = c.insertar(nombres.getText(), apellidos.getText(), telefono.getText(), direccion.getText(), email.getText());
            if (bandera) {
                salida.setText("Se ha agregado correctamente");
            } else {
                salida.setText("No se ha agregado");
            }
        } else {
            salida.setText("Por favor complete todos los campos antes de agregar el contacto");
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void apellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apellidosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apellidosActionPerformed

    private void consultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarActionPerformed
        ArrayList<CContacto> lista = new ArrayList<>();
        lista = c.consultar();
        //limpio la tabla antes de llevar los valores
        modelo.setRowCount(0);

        //ponemos la lista en la tabla
        for (CContacto con : lista) {
            modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
        }

    }//GEN-LAST:event_consultarActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        if (!telefono.getText().isEmpty()) {
            boolean bandera = c.borrar(telefono.getText());
            if (bandera) {
                salida.setText("Se ha borrado correctamente el contacto");
            } else {
                salida.setText("No se pudo borrar el contacto");
            }
        } else {
            salida.setText("Ingrese un telefono");
        }
    }//GEN-LAST:event_BorrarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        if (!nombres.getText().isEmpty()
                && !apellidos.getText().isEmpty()
                && !telefono.getText().isEmpty()
                && !direccion.getText().isEmpty()
                && !email.getText().isEmpty()) {
            boolean bandera = c.editar(nombres.getText(), apellidos.getText(), telefono.getText(), direccion.getText(), email.getText());
            if (bandera) {
                salida.setText("Se ha editado correctamente el contacto");
            } else {
                salida.setText("No se pudo editar el contacto");
            }
        } else {
            salida.setText("No hay datos para actualizar, los campos estan vacios");
        }

    }//GEN-LAST:event_editarActionPerformed

    private void listarciudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarciudadActionPerformed
        //limpio la tabla antes de llenar valores
        modelo.setRowCount(0);
        if (!direccion.getText().isEmpty()) {

            ArrayList<CContacto> listaciudad = new ArrayList<>();
            listaciudad = c.listarporciudad(direccion.getText());

            //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
            for (CContacto con : listaciudad) {
                modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
            }

            // Mostrar mensaje según el resultado
            if (modelo.getRowCount() == 0) {
                salida.setText("No se encontraron contactos en esa ciudad.");
            } else {
                salida.setText("Contactos encontrados: " + modelo.getRowCount());
            }
        } else {
            salida.setText("Debe ingresar una ciudad para buscar.");
        }
    }//GEN-LAST:event_listarciudadActionPerformed

    private void listarrangoidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarrangoidActionPerformed
        // Limpiar la tabla antes de mostrar nuevos resultados
        modelo.setRowCount(0);

        String idInicio = idinicial.getText().trim();
        String idFin = idfinal.getText().trim();

        if (!idInicio.isEmpty() && !idFin.isEmpty()) {
            try {
                int idInicioVal = Integer.parseInt(idInicio);
                int idFinVal = Integer.parseInt(idFin);

                ArrayList<CContacto> listaid = new ArrayList<>();
                listaid = c.listarrangoid(idInicioVal, idFinVal);

                //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
                for (CContacto con : listaid) {
                    modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
                }

                // Mostrar mensaje según el resultado
                if (modelo.getRowCount() == 0) {
                    salida.setText("No se encontraron contactos en ese rango de id.");
                } else {
                    salida.setText("Contactos encontrados: " + modelo.getRowCount());
                }
            } catch (NumberFormatException e) {
                salida.setText("Por favor ingrese valores numéricos válidos para los Ids.");
            }

        } else {
            salida.setText("Debe ingresar ambos valores de ID (inicio y fin)");
        }

    }//GEN-LAST:event_listarrangoidActionPerformed

    private void idinicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idinicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idinicialActionPerformed

    private void buscarnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarnombreActionPerformed
        // Limpio la tabla antes de mostrar nuevos resultados
        modelo.setRowCount(0);

        if (!nombres.getText().isEmpty()) {

            ArrayList<CContacto> listanombres = new ArrayList<>();
            listanombres = c.buscarpornombres(nombres.getText());

            //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
            for (CContacto con : listanombres) {
                modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
            }

            // Mostrar mensaje según el resultado
            if (modelo.getRowCount() == 0) {
                salida.setText("No se encontraron contactos con ese nombre");
            } else {
                salida.setText("Contactos encontrados: " + modelo.getRowCount());
            }
        } else {
            salida.setText("Debe ingresar un nombre para buscar");
        }


    }//GEN-LAST:event_buscarnombreActionPerformed

    private void buscarapellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarapellidoActionPerformed
        // Limpio la tabla antes de mostrar nuevos resultados
        modelo.setRowCount(0);

        if (!apellidos.getText().isEmpty()) {

            ArrayList<CContacto> listaapellidos = new ArrayList<>();
            listaapellidos = c.buscarporapellidos(apellidos.getText());

            //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
            for (CContacto con : listaapellidos) {
                modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
            }

            // Mostrar mensaje según el resultado
            if (modelo.getRowCount() == 0) {
                salida.setText("No se encontraron contactos con ese apellido");
            } else {
                salida.setText("Contactos encontrados: " + modelo.getRowCount());
            }
        } else {
            salida.setText("Debe ingresar un apellido para buscar");
        }
    }//GEN-LAST:event_buscarapellidoActionPerformed

    private void buscaridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaridActionPerformed
        modelo.setRowCount(0);

        if (!id.getText().isEmpty()) {
            ArrayList<CContacto> listaid3 = new ArrayList<>();
            listaid3 = c.buscarporid(id.getText());

            //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
            for (CContacto con : listaid3) {
                modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
            }

            // Mostrar mensaje según el resultado
            if (modelo.getRowCount() == 0) {
                salida.setText("No se encontraron contactos con este id");
            } else {
                salida.setText("Contactos encontrados: " + modelo.getRowCount());
            }
        } else {
            salida.setText("Debe ingresar un id para buscar");
        }


    }//GEN-LAST:event_buscaridActionPerformed

    private void listarcallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarcallesActionPerformed
        modelo.setRowCount(0);

        ArrayList<CContacto> listaCL = new ArrayList<>();
        listaCL = c.listarporCL();

        //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
        for (CContacto con : listaCL) {
            modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
        }

        // Mostrar mensaje según el resultado
        if (modelo.getRowCount() == 0) {
            salida.setText("No se encontraron contactos que vivan en calle");
        } else {
            salida.setText("Contactos encontrados: " + modelo.getRowCount());
        }
    }//GEN-LAST:event_listarcallesActionPerformed

    private void listarcarrerasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarcarrerasActionPerformed
        modelo.setRowCount(0);

        ArrayList<CContacto> listaCra = new ArrayList<>();
        listaCra = c.listarporCra();

        //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
        for (CContacto con : listaCra) {
            modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
        }

        // Mostrar mensaje según el resultado
        if (modelo.getRowCount() == 0) {
            salida.setText("No se encontraron contactos que vivan en carrera");
        } else {
            salida.setText("Contactos encontrados: " + modelo.getRowCount());
        }
    }//GEN-LAST:event_listarcarrerasActionPerformed

    private void listarprefijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarprefijoActionPerformed
        modelo.setRowCount(0);

        if (!telefono.getText().isEmpty()) {
            ArrayList<CContacto> listaprefijo = new ArrayList<>();
            listaprefijo = c.listarporprefijo(telefono.getText());

            //hago un ciclo para recorrer la lista y ponerla en la tabla de la interfaz
            for (CContacto con : listaprefijo) {
                modelo.addRow(new Object[]{con.getId(), con.getNombres(), con.getApellidos(), con.getDireccion(), con.getTelefono(), con.getEmail()});
            }

            // Mostrar mensaje según el resultado
            if (modelo.getRowCount() == 0) {
                salida.setText("No se encontraron contactos con este prefijo");
            } else {
                salida.setText("Contactos encontrados: " + modelo.getRowCount());
            }
        } else {
            salida.setText("Debe ingresar un prefijo para consultar");
        }
    
    }//GEN-LAST:event_listarprefijoActionPerformed

    private void listaralfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaralfaActionPerformed

    }//GEN-LAST:event_listaralfaActionPerformed

    private void listaridparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaridparActionPerformed

    }//GEN-LAST:event_listaridparActionPerformed

    private void listaridimparesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaridimparesActionPerformed

    }//GEN-LAST:event_listaridimparesActionPerformed

    private void listarcampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarcampoActionPerformed

    }//GEN-LAST:event_listarcampoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new interfaz().setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Borrar;
    private javax.swing.JButton agregar;
    private javax.swing.JTextField apellidos;
    private javax.swing.JButton buscarapellido;
    private javax.swing.JButton buscarid;
    private javax.swing.JButton buscarnombre;
    private javax.swing.JButton consultar;
    private javax.swing.JTextField direccion;
    private javax.swing.JButton editar;
    private javax.swing.JTextField email;
    private javax.swing.JTextField id;
    private javax.swing.JTextField idfinal;
    private javax.swing.JTextField idinicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lapellidos;
    private javax.swing.JLabel ldireccion;
    private javax.swing.JLabel lemail;
    private javax.swing.JLabel lid;
    private javax.swing.JLabel lidfinal;
    private javax.swing.JLabel lidnicial;
    private javax.swing.JButton listaralfa;
    private javax.swing.JButton listarcalles;
    private javax.swing.JButton listarcampo;
    private javax.swing.JButton listarcarreras;
    private javax.swing.JButton listarciudad;
    private javax.swing.JButton listaridimpares;
    private javax.swing.JButton listaridpar;
    private javax.swing.JButton listarprefijo;
    private javax.swing.JButton listarrangoid;
    private javax.swing.JLabel lnombres;
    private javax.swing.JLabel lopcioneslistar;
    private javax.swing.JLabel ltelefono;
    private javax.swing.JTextField nombres;
    private javax.swing.JTextArea salida;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField telefono;
    private javax.swing.JLabel titulo;
    private javax.swing.JComboBox<String> uncampo;
    // End of variables declaration//GEN-END:variables
}
